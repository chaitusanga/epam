{

  "Description":"Launch nested CloudFormation stack to provision and run AWS CodeDeploy",

  "AWSTemplateFormatVersion":"2010-09-09",

  "Parameters":{

    "S3Bucket":{

      "Type":"String",

      "Default": "aws-codedeploy-us-east-1"

      "Description":"The unique bucket name where deployment distribution is located"

    },

    "S3Key":{

      "Type":"String",

      "Description":"The unique bucket name where deployment distribution is located"

    },

    "EC2TagValue":{

      "Description":"The tag value that identifies this as a target for deployments.",

      "Type":"String",

      "AllowedPattern":"[\\x20-\\x7E]*",

      "ConstraintDescription":"Can contain only ASCII characters."

    },

    "EC2KeyPairName":{

      "Description":"Name of an existing Amazon EC2 key pair to enable SSH or RDP access to the instances.",

      "Type":"AWS::EC2::KeyPair::KeyName",

      "MinLength":"1",

      "MaxLength":"255",

      "AllowedPattern":"[\\x20-\\x7E]*",

      "ConstraintDescription":"Can contain only ASCII characters."

    }

  },

  "Resources":{

    "CodeDeployEC2InstancesStack":{

      "Type":"AWS::CloudFormation::Stack",

      "Properties":{

        "TemplateURL":"http://s3.amazonaws.com/aws-codedeploy-us-east-1/templates/latest/CodeDeploy_SampleCF_Template.json",

        "TimeoutInMinutes":"60",

        "Parameters":{

          "TagValue":{

            "Ref":"EC2TagValue"

          },

          "KeyPairName":{

            "Ref":"EC2KeyPairName"

          }

        }

      }

    },

    "CodeDeploySimpleStack":{

      "Type":"AWS::CloudFormation::Stack",

      "DependsOn":"CodeDeployEC2InstancesStack",

      "Properties":{

        "TemplateURL":"https://s3.amazonaws.com/stelligent-training-public/public/codedeploy/codedeploy-deployment.json",

        "TimeoutInMinutes":"60",

        "Parameters":{

          "TagValue":{

            "Ref":"EC2TagValue"

          },

          "RoleArn":{

            "Fn::GetAtt":[

              "CodeDeployEC2InstancesStack",

              "Outputs.CodeDeployTrustRoleARN"

            ]

          },

          "Bucket":{

            "Ref":"S3Bucket"

          },

          "Key":{

            "Ref":"S3Key"

          }

        }

      }

    },

        "lambdaExecutionRole":{

      "Type":"AWS::IAM::Role",

      "Properties":{

        "AssumeRolePolicyDocument":{

          "Statement":[

            {

              "Action":[

                "sts:AssumeRole"

              ],

              "Effect":"Allow",

              "Principal":{

                "Service":[

                  "lambda.amazonaws.com"

                ]

              }

            }

          ],

          "Version":"2012-10-17"

        },

        "Path":"/",

        "Policies":[

          {

            "PolicyDocument":{

              "Statement":[

                {

                  "Action":[

                    "logs:CreateLogGroup",

                    "logs:CreateLogStream",

                    "logs:PutLogEvents"

                  ],

                  "Effect":"Allow",

                  "Resource":"arn:aws:logs:*:*:*"

                },

                {

                  "Action":[

                    "cloudformation:DescribeStacks",

                    "cloudformation:ListStackResources"

                  ],

                  "Effect":"Allow",

                  "Resource":"*"

                }

              ],

              "Version":"2012-10-17"

            },

            "PolicyName":"root"

          }

        ]

      }

    },

    "lookupStackResources":{

      "Type":"AWS::Lambda::Function",

      "Properties":{

        "Code":{

          "ZipFile":{

            "Fn::Join":[

              "",

              [

                "var response = require('cfn-response');",

                "exports.handler = function(event, context) {",

                "  console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",

                "  if (event.RequestType == 'Delete') {",

                "    response.send(event, context, response.SUCCESS);",

                "    return;",

                "  }",

                "  var stackName = event.ResourceProperties.StackName;",

                "  var responseData = {};",

                "  if (stackName) {",

                "    var aws = require('aws-sdk');",

                "    var cfn = new aws.CloudFormation();",

                "    cfn.listStackResources({StackName: stackName}, function(err, data) {",

                "        if (err) {",

                "          responseData = {Error: 'listStackResources call failed'};",

                "          console.log(responseData.Error + ':\\n', err);",

                "          response.send(event, context, response.FAILED, responseData);",

                "        }",

                "        else {",

                "          data.StackResourceSummaries.forEach(function(output) {",

                "            responseData[output.LogicalResourceId] = output.PhysicalResourceId;",

                "          });",

                "          response.send(event, context, response.SUCCESS, responseData);",

                "        }",

                "    });",

                "  } else {",

                "      responseData = {Error: 'Stack name not specified'};",

                "      console.log(responseData.Error);",

                "      response.send(event, context, response.FAILED, responseData);",

                "  }",

                "};"

              ]

            ]

          }

        },

        "Runtime":"nodejs",

        "Role":{

          "Fn::GetAtt":[

            "lambdaExecutionRole",

            "Arn"

          ]

        },

        "Timeout":"30",

        "Handler":"index.handler"

      }

    },

    "NetworkResources":{

      "Type":"Custom::CodeDeployResources",

      "Properties":{

        "ServiceToken":{

          "Fn::Join":[

            "",

            [

              "arn:aws:lambda:",

              {

                "Ref":"AWS::Region"

              },

              ":",

              {

                "Ref":"AWS::AccountId"

              },

              ":function:",

              {

                "Ref":"lookupStackResources"

              }

            ]

          ]

        },

        "StackName":{

          "Ref":"CodeDeployEC2InstancesStack"

        }

      }

    }

  },

  "Outputs":{

    "MyAWSAccountId":{

      "Value":{

        "Ref":"AWS::AccountId"

      }

    }

  }

}